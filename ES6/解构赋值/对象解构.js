let person = {
    name: 'lemon', 
    age: 18, 
    sex: 'male',
    weight: undefined,
    job: {
        title: 'software engineer'
    }
}

// 未使用解构
let name1 = person.name;
let age1 = person.age;
let sex1 = person.sex;
console.log(name1);   // lemon
console.log(age1);    // 18
console.log(sex1);    // male

// ---------------------------------------------------------------------
// 使用对象解构**********************************************************
// 不使用别名************************************************************
let {name, age, sex} = person;
console.log(name);    // lemon
console.log(age);     // 18
console.log(sex);     // male

// ---------------------------------------------------------------------
// 使用对象解构**********************************************************
// 使用别名**************************************************************
let {name: name2, age: age2, sex: sex2} = person;
console.log(name2);    // lemon
console.log(age2);     // 18
console.log(sex2);     // male

// ---------------------------------------------------------------------
// 使用对象解构**********************************************************
// 解构的时候可以忽略掉某些不需要赋值的属性*********************************
let {name: name3, sex: sex3} = person;
console.log(name3);    // lemon
console.log(sex3);     // male

// ---------------------------------------------------------------------
// 使用对象解构**********************************************************
// 如果属性不存在，该变量的值就是undefined*********************************
let {name: name4, height: height4} = person;
console.log(name4);     // lemon
console.log(height4);   // undefined


// ---------------------------------------------------------------------
// 使用对象解构**********************************************************
// 可以在解构的同时赋默认值，如果属性不存在或为undefined，就会使用默认值*****
let {name: name5 = '柠檬', height: height5 = 182, weight: weight5 = '65kg'} = person;
console.log(name5);    // lemon
console.log(height5);  // 182
console.log(weight5);  // 65kg

// ---------------------------------------------------------------------
// 使用对象解构**********************************************************
// 解构在内部使用函数 ToObject() (这玩意儿不能再运行环境中直接访问)*********
// 把 数据源 转换为 对象*************************************************
// null 与 undefined 不能被解构*****************************************
let {length} = 'ToObject';
console.log(length);   // 8

let {constructor: c} = 4;
console.log(c);   // [Function: Number]

// let {n} = null;
// console.log(n);   // TypeError

// let {u} = undefined;
// console.log(u);    // TypeError


// ---------------------------------------------------------------------
// 解构并不要求变量必须在解构表达式中声明***********************************
// 如果是事先声明的变量***************************************************
// 赋值表达式必须包含在一对括号里边*****************************************
let name6, age6, sex6;
({name: name6, age: age6, sex: sex6} = person);
console.log(name6);   // lemon
console.log(age6);    // 18
console.log(sex6);    // male

// ---------------------------------------------------------------------
// 嵌套解构**************************************************************
let {name: name7, job: {title: title7}} = person;
console.log(name7);   // lemon
console.log(title7);  // software engineer

// ---------------------------------------------------------------------
// 嵌套解构**************************************************************
// 在外层属性未定义的情况下不能使用嵌套解构*********************************
// 无论源对象还是目标对象*************************************************
// let {IQ: {num}} = person;
// console.log(num);    //TypeError

// ---------------------------------------------------------------------
// 部分解构**************************************************************
// 涉及多个属性的解构赋值是一个无关输出的操作*******************************
// 开始赋值成功而后面出错*************************************************
// 解构会成功完成一部分***************************************************
let name8, num8;
try {
    ({name: name8, IQ: {num8}} = person);
} catch (error) {
    console.log(name8);  // lemon
    console.log(num8);   // undefined
}

// ---------------------------------------------------------------------
// 参数列表中也可以解构***************************************************
// 不会影响arguments对象*************************************************
function printPerson(name9, {age: age9, sex: sex9}) {
    console.log(name9);
    console.log(age9);
    console.log(sex9);
}
printPerson('lemon', person);
// lemon
// 18
// male

// ---------------------------------------------------------------------
// 对象可以解构数组******************************************************
// 因为 有ToObject() ***************************************************
// 但是数组不能解构对象***************************************************
let {0: first, 1: second} = ['first', 'second'];
console.log(first);   // first
console.log(second);  // second
 